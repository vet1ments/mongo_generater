package mg{{.PackageName}}

import (
	"context"
	"errors"
	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
	"time"{{range $_, $v := .Imports}}
{{end}}
)

var {{.Name}}Collection = "{{.Name}}"

type {{.Name}}Connection struct {
	Client     *mongo.Client
	DB         *mongo.Database
	Collection *mongo.Collection
}

type {{.Name}}Doc struct {
	ID bson.ObjectID `bson:"_id" json:"id"`    {{range $_, $v := .Fields}}
	{{$v.Upper}} {{$v.Type}} `bson:"{{$v.Snake}}" json:"{{$v.Snake}},omitempty"`{{end}}
}

var conn{{.Name}} = &{{.Name}}Connection{}

func Is{{.Name}}CollectionInit() error {
	if conn{{.Name}}.Client == nil || conn{{.Name}}.DB == nil || conn{{.Name}}.Collection == nil {
		return errors.New("Not initialized")
	}
	return nil
}

func Init{{.Name}}Collection(client *mongo.Client, db *mongo.Database) {
	conn{{.Name}}.Client = client
	conn{{.Name}}.DB = db
	conn{{.Name}}.Collection = db.Collection({{.Name}}Collection)
}

func Get{{.Name}}(id bson.ObjectID) (*{{.Name}}Doc, error) {
	if e := Is{{.Name}}CollectionInit(); e != nil {
		return nil, e
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	model := &{{.Name}}Doc{}
	err := conn{{.Name}}.Collection.FindOne(ctx, bson.M{"_id": id}).Decode(model)
	if err != nil {
		return nil, err
	}
	return model, nil
}

func GetAll{{.Name}}() ([]*{{.Name}}Doc, error) {
	if e := Is{{.Name}}CollectionInit(); e != nil {
		return nil, e
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	cur, err := conn{{.Name}}.Collection.Find(ctx, bson.M{})
	defer cur.Close(ctx)
	if err != nil {
		return nil, err
	}
	models := make([]*{{.Name}}Doc, 0)
	for cur.Next(ctx) {
		model := &{{.Name}}Doc{}
		if err = cur.Decode(&model); err != nil {
			continue
		} else {
			models = append(models, model)
		}
	}
	return models, nil
}

func Create{{.Name}}(model *{{.Name}}Doc) (*{{.Name}}Doc, error) {
	if e := Is{{.Name}}CollectionInit(); e != nil {
		return nil, e
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	model.ID = bson.NewObjectID()
	_, err := conn{{.Name}}.Collection.InsertOne(ctx, model)
	if err != nil {
		return nil, err
	}
	return model, nil
}

func Get{{.Name}}Collection() (*mongo.Collection, error) {
	if e := Is{{.Name}}CollectionInit(); e != nil {
		return nil, e
	}
	return conn{{.Name}}.Collection, nil
}

func Find{{.Name}}Doc(filter interface{},
		opts ...options.Lister[options.FindOptions]) (*mongo.Cursor, error) {
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	col, err := Get{{.Name}}Collection()
	if err != nil {
		return nil, err
	}

	cur, err := col.Find(ctx, filter, opts...)
	defer cur.Close(ctx)
	if err != nil {
		return nil, err
	}
	return cur, nil
}

func FindOne{{.Name}}Doc(filter interface{},
		opts ...options.Lister[options.FindOneOptions]) (*{{.Name}}Doc, error) {

	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	col, err := Get{{.Name}}Collection()
	if err != nil {
		return nil, err
	}

	data := &{{.Name}}Doc{}
	err = col.FindOne(ctx, filter, opts...).Decode(data)
	if err != nil {
		return nil, err
	}
	return data, nil
}

